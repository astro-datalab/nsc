#!/usr/bin/env python

import os
import sys
import numpy as np
import warnings
from astropy.io import fits
from astropy.utils.exceptions import AstropyWarning
import time
import shutil
import re
import subprocess
import glob
import logging
import socket
from datetime import datetime
from argparse import ArgumentParser
from nsc import utils
from nsc.nsc_instcal_measure import Exposure

if __name__ == "__main__":

    # Run measurement on one full DECam/Mosaic3/Bok InstCal image
    parser = ArgumentParser(description='Run measurement on one NSC InstCal image')
    parser.add_argument('fluxfile', type=str, nargs=1, help='Absolute flux filename')
    parser.add_argument('wtfile', type=str, nargs=1, help='Absolute weight filename')
    parser.add_argument('maskfile', type=str, nargs=1, help='Absolute mask filename')
    parser.add_argument('version', type=str, nargs=1, help='NSC version')
    parser.add_argument('--host',type=str,nargs=1,default="None",help='hostname, default "None", other options supported are "cca","tempest_katie","tempest_group","gp09/7","tacc"')
    parser.add_argument('--stagger',type=int, nargs=1, default=60, help='Stagger time')
    parser.add_argument('--x',action='store_true', help='Exposure version is of format "vX"')
    parser.add_argument('--delete',action='store_true', help='Delete downloaded exposures at end')
    parser.add_argument('--nowait',action='store_true', help='Do not wait for files to be downloaded')
    parser.add_argument('-r','--redo', action='store_true', help='Redo exposures that were previously processed')
    args = parser.parse_args()

    # Inputs                                                                                                  
    version = args.version[0]                # NSC version, like "v4", default "None"
    if version=="None": version = None
    host = str(args.host[0])                 # hostname of server, default "None"
    if host=="None": host = None
    if isinstance(args.stagger,list):
        stagger = args.stagger[0]
    else:
        stagger = args.stagger
    x = args.x                               # if called, exposure version is of format "vX"
    redo = args.redo                         # if called, redo = True
    delete = args.delete
    nowait = args.nowait
    print("version =",version)
    print("host =",host)
    print("stagger =",stagger)
    print("x =",x)
    print("redo =",redo)
    print("delete =",delete)
    print("nowait =",nowait)
    
    # Get NSC directories
    basedir, tmpdir = utils.getnscdirs(version,host)
    print("Working in basedir,tmpdir = ",basedir,tmpdir)
    # Make sure the directories exist                                                                         
    if not os.path.exists(basedir):
        os.makedirs(basedir)
    if not os.path.exists(tmpdir):
        os.makedirs(tmpdir)

    # File names
    fluxfile = args.fluxfile
    if type(fluxfile) is list:
        fluxfile = fluxfile[0]
    wtfile = args.wtfile
    if type(wtfile) is list:
        wtfile = wtfile[0]
    maskfile = args.maskfile
    if type(maskfile) is list:
        maskfile = maskfile[0]


    # Check if file naming convention lists version "vX"                                                      
    if x:
        vers = fluxfile.split(".")[0].split("_")[-1]
        versx = re.split('(\d+)',vers)[0]+"x"
        fluxfile = fluxfile.split(vers)[0]+versx+fluxfile.split(vers)[-1]
        wtfile = wtfile.split(vers)[0]+versx+wtfile.split(vers)[-1]
        maskfile = maskfile.split(vers)[0]+versx+maskfile

    # Download files from archive using md5sum
    files = {'fluxfile':fluxfile,'wtfile':wtfile,'maskfile':maskfile}
    origfiles = files.copy()
    for ftype in files.keys():
        fname = files[ftype]
        if fname.find('.fits') == -1 and len(fname) < 40:
            print('md5sum input. Downloading from archive')
            md5sum = fname
            status,filename = utils.download_from_archive(md5sum,tmpdir)
            files[ftype] = filename
        fluxfile = files['fluxfile']
        wtfile = files['wtfile']
        maskfile = files['maskfile']

    # Tempest images are in the download directory
    if host[:7]=='tempest' and 'download' in fluxfile:
        # Need to wait until the files are downloaded
        while (True):
            if os.path.exists(fluxfile) and os.path.exists(wtfile) and os.path.exists(maskfile):
                break
            else:
                if nowait:
                    print(time.asctime(),'\nfiles not found. nowait set.  Quitting')
                    sys.exit()
                print(time.asctime(),'\nfiles not found. waiting')
                time.sleep(60)
        
    # Check that the files exist
    if os.path.exists(fluxfile) is False:
        print(fluxfile+" file NOT FOUND")
        sys.exit()
    if os.path.exists(wtfile) is False:
        print(wtfile+" file NOT FOUND")
        sys.exit()
    if os.path.exists(maskfile) is False:
        print(maskfile+" file NOT FOUND")
        sys.exit()

    # Check that the InstCal files are not corrupted
    print('Checking the InstCal files')
    res = subprocess.run(['nsccheck',fluxfile,wtfile,maskfile],shell=False,capture_output=True)
    txt = res.stdout
    if type(txt)==bytes:
        txt = txt.decode()
    txt = txt.split('\n')
    if 'Checking' in txt[0]:
        txt.pop(0)
    if txt[-1]=='':
        txt.pop(len(txt)-1)
    okay = [True if t[:2]=='OK' else False for t in txt]
    if np.sum(okay)<3:
        print('Some files have problems')
        sys.exit()
        
    # Stagger time
    if stagger > 0:
        sleeptime = np.random.randint(1,stagger)
        print('Sleeping {:} seconds'.format(sleeptime))
        time.sleep(sleeptime)
        
    
    # Start the logfile 
    #------------------ 
    #host = socket.gethostname()
    #hostname = host.split('.')[0]
    #logtime = datetime.now().strftime("%Y%m%d%H%M%S") 
    ## Set up logging to screen and logfile
    #logFormatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s")
    #logger = logging.getLogger() 
    #while logger.hasHandlers(): # some existing loggers, remove them   
    #    logger.removeHandler(logger.handlers[0]) 
    #logger = logging.getLogger()
    #logtime = datetime.now().strftime("%Y%m%d%H%M%S")
    #logfile = expdir+'/'+base+'_meas.log'
    #if os.path.exists(logfile): os.remove(logfile)
    #fileHandler = logging.FileHandler(logfile)
    #fileHandler.setFormatter(logFormatter)
    #logger.addHandler(fileHandler)
    #consoleHandler = logging.StreamHandler()
    #consoleHandler.setFormatter(logFormatter)
    #logger.addHandler(consoleHandler)
    #logger.setLevel(logging.NOTSET)

    # Start keeping time                                                                                      
    t0 = time.time()

    # Create the Exposure object
    exp = Exposure(fluxfile,wtfile,maskfile,nscversion=version,host=host,delete=delete)

    # Check if the output files already exist
    if redo==False and os.path.exists(exp.outdir):
        outfile = os.path.join(exp.outdir,exp.base+'_meas.fits')
        if os.path.exists(outfile):
            print(outfile,' output file already exists.  Use --redo to overwrite.')
            sys.exit()
    if redo and os.path.exists(exp.outdir):
        print('Removing old output directory ',exp.outdir)
        shutil.rmtree(exp.outdir)

    # Run
    exp.run()

    # Delete files
    if delete:
        print('Deleting files')
        for f in [fluxfile,wtfile,maskfile]:
            print(f)
            if os.path.exists(f): os.remove(f)
    
    print("Total time = "+str(time.time()-t0)+" seconds")





